apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"tekton.dev/v1beta1","kind":"ClusterTask","metadata":{"annotations":{"manifestival":"new","tekton.dev/displayName":"git clone","tekton.dev/pipelines.minVersion":"0.12.1","tekton.dev/tags":"git"},"labels":{"app.kubernetes.io/version":"0.2","operator.tekton.dev/provider-type":"redhat"},"name":"git-clone","namespace":"openshift-pipelines","ownerReferences":[{"apiVersion":"operator.tekton.dev/v1alpha1","blockOwnerDeletion":true,"controller":true,"kind":"Config","name":"cluster","uid":"6d739eb2-5b35-485d-b69a-9516eca24974"}]},"spec":{"description":"These Tasks are Git tasks to work with repositories used by other tasks in your Pipeline.\nThe git-clone Task will clone a repo from the provided url into the output Workspace. By default the repo will be cloned into the root of your Workspace. You can clone into a subdirectory by setting this Task's subdirectory param.","params":[{"description":"git url to clone","name":"url","type":"string"},{"default":"","description":"git revision to checkout (branch, tag, sha, ref…)","name":"revision","type":"string"},{"default":"","description":"(optional) git refspec to fetch before checking out revision","name":"refspec"},{"default":"true","description":"defines if the resource should initialize and fetch the submodules","name":"submodules","type":"string"},{"default":"1","description":"performs a shallow clone where only the most recent commit(s) will be fetched","name":"depth","type":"string"},{"default":"true","description":"defines if http.sslVerify should be set to true or false in the global git config","name":"sslVerify","type":"string"},{"default":"","description":"subdirectory inside the \"output\" workspace to clone the git repo into","name":"subdirectory","type":"string"},{"default":"true","description":"clean out the contents of the repo's destination directory (if it already exists) before trying to clone the repo there","name":"deleteExisting","type":"string"},{"default":"","description":"git HTTP proxy server for non-SSL requests","name":"httpProxy","type":"string"},{"default":"","description":"git HTTPS proxy server for SSL requests","name":"httpsProxy","type":"string"},{"default":"","description":"git no proxy - opt out of proxying HTTP/HTTPS requests","name":"noProxy","type":"string"},{"default":"true","description":"log the commands used during execution","name":"verbose","type":"string"}],"results":[{"description":"The precise commit SHA that was fetched by this Task","name":"commit"},{"description":"The precise URL that was fetched by this Task","name":"url"}],"steps":[{"image":"registry.redhat.io/openshift-pipelines-tech-preview/pipelines-git-init-rhel8@sha256:7e18e13a94c9c82e369274984500401e27684d3565393cf6ed2bad55f2d751bc","name":"clone","script":"#!/bin/sh\nset -eu -o pipefail\n\nif [[ \"$(params.verbose)\" == \"true\" ]] ; then\n  set -x\nfi\n\nCHECKOUT_DIR=\"$(workspaces.output.path)/$(params.subdirectory)\"\n\ncleandir() {\n  # Delete any existing contents of the repo directory if it exists.\n  #\n  # We don't just \"rm -rf $CHECKOUT_DIR\" because $CHECKOUT_DIR might be \"/\"\n  # or the root of a mounted volume.\n  if [[ -d \"$CHECKOUT_DIR\" ]] ; then\n    # Delete non-hidden files and directories\n    rm -rf \"$CHECKOUT_DIR\"/*\n    # Delete files and directories starting with . but excluding ..\n    rm -rf \"$CHECKOUT_DIR\"/.[!.]*\n    # Delete files and directories starting with .. plus any other character\n    rm -rf \"$CHECKOUT_DIR\"/..?*\n  fi\n}\n\nif [[ \"$(params.deleteExisting)\" == \"true\" ]] ; then\n  cleandir\nfi\n\ntest -z \"$(params.httpProxy)\" || export HTTP_PROXY=$(params.httpProxy)\ntest -z \"$(params.httpsProxy)\" || export HTTPS_PROXY=$(params.httpsProxy)\ntest -z \"$(params.noProxy)\" || export NO_PROXY=$(params.noProxy)\n\n/ko-app/git-init \\\n  -url \"$(params.url)\" \\\n  -revision \"$(params.revision)\" \\\n  -refspec \"$(params.refspec)\" \\\n  -path \"$CHECKOUT_DIR\" \\\n  -sslVerify=\"$(params.sslVerify)\" \\\n  -submodules=\"$(params.submodules)\" \\\n  -depth \"$(params.depth)\"\ncd \"$CHECKOUT_DIR\"\nRESULT_SHA=\"$(git rev-parse HEAD)\"\nEXIT_CODE=\"$?\"\nif [ \"$EXIT_CODE\" != 0 ] ; then\n  exit $EXIT_CODE\nfi\n# ensure we don't add a trailing newline to the result\necho -n \"$RESULT_SHA\" \u003e $(results.commit.path)\necho -n \"$(params.url)\" \u003e $(results.url.path)\n"}],"workspaces":[{"description":"The git repo will be cloned onto the volume backing this workspace","name":"output"}]}}
    manifestival: new
    tekton.dev/displayName: git clone
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: git
  creationTimestamp: "2021-09-21T15:49:33Z"
  generation: 1
  labels:
    app.kubernetes.io/version: "0.2"
    operator.tekton.dev/provider-type: redhat
  managedFields:
  - apiVersion: tekton.dev/v1beta1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:manifestival: {}
          f:tekton.dev/displayName: {}
          f:tekton.dev/pipelines.minVersion: {}
          f:tekton.dev/tags: {}
        f:labels:
          .: {}
          f:app.kubernetes.io/version: {}
          f:operator.tekton.dev/provider-type: {}
        f:ownerReferences:
          .: {}
          k:{"uid":"6d739eb2-5b35-485d-b69a-9516eca24974"}:
            .: {}
            f:apiVersion: {}
            f:blockOwnerDeletion: {}
            f:controller: {}
            f:kind: {}
            f:name: {}
            f:uid: {}
      f:spec:
        .: {}
        f:description: {}
        f:params: {}
        f:results: {}
        f:steps: {}
        f:workspaces: {}
    manager: openshift-pipelines-operator
    operation: Update
    time: "2021-09-21T15:49:32Z"
  name: git-clone
  ownerReferences:
  - apiVersion: operator.tekton.dev/v1alpha1
    blockOwnerDeletion: true
    controller: true
    kind: Config
    name: cluster
    uid: 6d739eb2-5b35-485d-b69a-9516eca24974
  resourceVersion: "579335"
  selfLink: /apis/tekton.dev/v1beta1/clustertasks/git-clone
  uid: 04bac5b2-b37f-4ee8-81d6-eeca7d7e5371
spec:
  description: |-
    These Tasks are Git tasks to work with repositories used by other tasks in your Pipeline.
    The git-clone Task will clone a repo from the provided url into the output Workspace. By default the repo will be cloned into the root of your Workspace. You can clone into a subdirectory by setting this Task's subdirectory param.
  params:
  - description: git url to clone
    name: url
    type: string
  - default: ""
    description: git revision to checkout (branch, tag, sha, ref…)
    name: revision
    type: string
  - default: ""
    description: (optional) git refspec to fetch before checking out revision
    name: refspec
    type: string
  - default: "true"
    description: defines if the resource should initialize and fetch the submodules
    name: submodules
    type: string
  - default: "1"
    description: performs a shallow clone where only the most recent commit(s) will
      be fetched
    name: depth
    type: string
  - default: "true"
    description: defines if http.sslVerify should be set to true or false in the global
      git config
    name: sslVerify
    type: string
  - default: ""
    description: subdirectory inside the "output" workspace to clone the git repo
      into
    name: subdirectory
    type: string
  - default: "true"
    description: clean out the contents of the repo's destination directory (if it
      already exists) before trying to clone the repo there
    name: deleteExisting
    type: string
  - default: ""
    description: git HTTP proxy server for non-SSL requests
    name: httpProxy
    type: string
  - default: ""
    description: git HTTPS proxy server for SSL requests
    name: httpsProxy
    type: string
  - default: ""
    description: git no proxy - opt out of proxying HTTP/HTTPS requests
    name: noProxy
    type: string
  - default: "true"
    description: log the commands used during execution
    name: verbose
    type: string
  results:
  - description: The precise commit SHA that was fetched by this Task
    name: commit
  - description: The precise URL that was fetched by this Task
    name: url
  steps:
  - image: registry.redhat.io/openshift-pipelines-tech-preview/pipelines-git-init-rhel8@sha256:7e18e13a94c9c82e369274984500401e27684d3565393cf6ed2bad55f2d751bc
    name: clone
    resources: {}
    script: |
      #!/bin/sh
      set -eu -o pipefail

      if [[ "$(params.verbose)" == "true" ]] ; then
        set -x
      fi

      CHECKOUT_DIR="$(workspaces.output.path)/$(params.subdirectory)"

      cleandir() {
        # Delete any existing contents of the repo directory if it exists.
        #
        # We don't just "rm -rf $CHECKOUT_DIR" because $CHECKOUT_DIR might be "/"
        # or the root of a mounted volume.
        if [[ -d "$CHECKOUT_DIR" ]] ; then
          # Delete non-hidden files and directories
          rm -rf "$CHECKOUT_DIR"/*
          # Delete files and directories starting with . but excluding ..
          rm -rf "$CHECKOUT_DIR"/.[!.]*
          # Delete files and directories starting with .. plus any other character
          rm -rf "$CHECKOUT_DIR"/..?*
        fi
      }

      if [[ "$(params.deleteExisting)" == "true" ]] ; then
        cleandir
      fi

      test -z "$(params.httpProxy)" || export HTTP_PROXY=$(params.httpProxy)
      test -z "$(params.httpsProxy)" || export HTTPS_PROXY=$(params.httpsProxy)
      test -z "$(params.noProxy)" || export NO_PROXY=$(params.noProxy)

      /ko-app/git-init \
        -url "$(params.url)" \
        -revision "$(params.revision)" \
        -refspec "$(params.refspec)" \
        -path "$CHECKOUT_DIR" \
        -sslVerify="$(params.sslVerify)" \
        -submodules="$(params.submodules)" \
        -depth "$(params.depth)"
      cd "$CHECKOUT_DIR"
      RESULT_SHA="$(git rev-parse HEAD)"
      EXIT_CODE="$?"
      if [ "$EXIT_CODE" != 0 ] ; then
        exit $EXIT_CODE
      fi
      # ensure we don't add a trailing newline to the result
      echo -n "$RESULT_SHA" > $(results.commit.path)
      echo -n "$(params.url)" > $(results.url.path)
  workspaces:
  - description: The git repo will be cloned onto the volume backing this workspace
    name: output
